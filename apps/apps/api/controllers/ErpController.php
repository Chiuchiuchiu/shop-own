<?php
/**
 * Created by PhpStorm.
 * User: HQM
 * Date: 2018/11/15
 * Time: 09:22
 */

namespace apps\api\controllers;


use apps\api\models\MemberHouse;
use components\newWindow\NewWindow;
use yii\helpers\ArrayHelper;

class ErpController extends Controller
{
    public $modelClass = 'apps\api\models\Member';

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index']);
        unset($actions['create']);
        unset($actions['update']);
        unset($actions['delete']);

        return $actions;
    }

    /**
     * 查询用户信息
     * @return string
     * @throws \yii\base\ErrorException
     * @throws \yii\base\InvalidConfigException
     */
    public function actionCustomerHouseInfo()
    {
        if(empty($this->phone)){
            return $this->renderJsonFail(50010);
        }

        $memberPhone = $this->phone;
        $memberHouse = MemberHouse::find()
            ->select('house_id')
            ->where(['member_id' => $this->userId])
            ->asArray()->all();
        $memberHouse = ArrayHelper::getColumn($memberHouse, 'house_id');

        $houseList = [];
        $houseIds = [];
        $number = 0;
        $customerName = '';
        //查询客户信息
        $memberHouseInfo = (new NewWindow())->getCustomerHouseInfo(0, $memberPhone);
        if(!empty($memberHouseInfo['Response']['Data']['Record'])){
            $customerName = $memberHouseInfo['Response']['Data']['Record'][0]['CustomerName'];
            foreach($memberHouseInfo['Response']['Data']['Record'] as $key => $val){
                if(in_array($val['ResKind'], [5, 9])){
                    $exists = '-';
                    if(in_array($val['HouseID'], $memberHouse)) {
                        $exists = '已存在';
                    } else {
                        $number += 1;
                        switch ($val['ResKind']){
                            case 5:
                                $group = MemberHouse::GROUP_HOUSE;
                                break;
                            default:
                                $group = MemberHouse::GROUP_PARKING;
                                break;
                        }

                        $houseIds[$key] = $val['HouseID'].'-'.$group;
                    }
                    $houseList[] = [
                        'houseName' => $val['HouseName'],
                        'ex' => $exists,
                    ];
                }
            }
        }

        if(count($houseList) < 1){
            return $this->renderJsonFail(41006);
        }

        $houseIds = implode(',', $houseIds);
        return $this->renderJsonSuccess(200, [
            'houseList' => $houseList,
            'houseIds' => $houseIds,
            'number' => $number,
            'customerName' => $customerName,
            'memberPhone' => $memberPhone,
        ]);
    }

}