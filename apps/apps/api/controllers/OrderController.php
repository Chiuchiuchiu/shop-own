<?php
/**
 * Created by
 * Author: HQM
 * Time: 2018-10-12
 * Description:
 */

namespace apps\api\controllers;

use apps\api\models\House;
use apps\api\models\PmOrder;
use common\models\AuthHouseNotificationMember;
use common\models\MemberPromotionCode;
use common\models\PmChristmasBillItem;
use common\models\PmOrderDiscounts;
use common\models\PmOrderItem;
use common\models\SysSwitch;
use components\newWindow\NewWindow;
use components\swiftpass\SwiftPass;
use components\wechatSDK\WechatSDK;
use yii\base\Configurable;
use yii\data\ActiveDataProvider;
use yii\data\Pagination;
use yii\db\Connection;
use yii\helpers\ArrayHelper;

class OrderController extends Controller
{
    public $modelClass = 'apps\api\models\PmOrder';

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['index']);
        unset($actions['create']);
        unset($actions['view']);
        unset($actions['update']);
        unset($actions['delete']);

        return $actions;
    }

    public function actionPmList()
    {
        $list = [];

        $dataProvider = new ActiveDataProvider();
        $dataProvider->query = PmOrder::find()
            ->where([
                'status' => [PmOrder::STATUS_PAYED, PmOrder::STATUS_TEST_PAYED, PmOrder::STATUS_REFUND],
                'member_id' => $this->userId
            ])
            ->orderBy('created_at DESC');
        $dataProvider->setPagination(new Pagination(['validatePage' => false]));
        $dataProvider->setSort(false);
        foreach($dataProvider->getModels() as $value){
            /**
             * @var $value PmOrder
             */
            $discountAmount = 0.00;
            $originAmount = $value->total_amount;
            if(isset($value->pmOrderDiscounts)){
                $discountAmount = $value->pmOrderDiscounts->discounts_amount;
                $originAmount = bcadd($value->total_amount, $discountAmount, 2);
            }
            $items = [];
            foreach($value->items as $item){
                /**
                 * @var $item PmOrderItem
                 */
                $items[] = [
                    'billDate' => $item->bill_date,
                    'chargeItemName' => $item->charge_item_name,
                    'amount' => $item->amount,
                ];
            }


            //电子发票
            $invoiceParams = \Yii::$app->params['allow_project_fpzz'];
            $allowInv = false;
            $invStatusText = '开发票';
            $isOpened = false;
            $invId = $value->id;
            if(in_array($value->project_house_id, $invoiceParams['project_house_id'])){
                if($value->discount_status < 1){
                    if($invoiceParams['allow_use'] && $value->total_amount >= 1){
                        $allowInv = true;
                    }
                }
            }

            //已有开票记录
            if(isset($value->pmOrderFpzz->status)){
                $invStatusText = $value->pmOrderFpzz->statusText;
                $isOpened = true;
                $invId = $value->pmOrderFpzz->id;
            }

            $list[] = [
                'orderId' => $value->id,
                'totalAmount' => $value->total_amount,
                'originAmount' => $originAmount,
                'discountAmount' => $discountAmount,
                'discountStatus' => $value->discount_status,
                'showName' => $value->house->showName,
                'ancestorName' => $value->house->ancestor_name,
                'payedAt' => date('Y-m-d H:i:s', $value->payed_at),
                'statusText' => $value->statusText,
                'number' => $value->number,
                'childList' => $items,
                'allowInv' => $allowInv,
                'isOpened' => $isOpened,
                'invId' => $invId,
                'invStatusText' => $invStatusText,
            ];
        }

        return $this->renderJsonSuccess(200, $list);
    }

    public function actionDetail($id=0)
    {
        /**
         * @var $model PmOrder
         */
        $model = PmOrder::find()
            ->where([
                'status' => [PmOrder::STATUS_PAYED, PmOrder::STATUS_TEST_PAYED, PmOrder::STATUS_REFUND],
                'member_id' => $this->userId,
                'id' => $id
            ])
            ->one();
        if(empty($model)){
            return $this->renderJsonFail(80001);
        }

        $items = [];
        $discountAmount = 0.00;
        $originAmount = $model->total_amount;
        if(isset($value->pmOrderDiscounts)){
            $discountAmount = $model->pmOrderDiscounts->discounts_amount;
            $originAmount = bcadd($model->total_amount, $discountAmount, 2);
        }

        foreach($model->items as $item){
            /**
             * @var $item PmOrderItem
             */
            $items[] = [
                'billDate' => $item->bill_date,
                'chargeItemName' => $item->charge_item_name,
                'amount' => $item->amount,
                'usageAmount' => $item->usage_amount,
            ];
        }

        $detail = [
            'showName' => $model->house->house_name,
            'ancestorName' => $model->house->ancestor_name,
            'status' => $model->status,
            'number' => $model->number,
            'totalAmount' => $model->total_amount,
            'payedAt' => date('Y-m-d H:i:s', $model->payed_at),
            'statusText' => $model->statusText,
            'originAmount' => $originAmount,
            'discountStatus' => $model->discount_status,
            'discountAmount' => $discountAmount,
            'childList' => $items
        ];

        return $this->renderJsonSuccess(200, $detail);
    }

    /**
     * 创建订单
     * @author HQM 2018/11/15
     * @return string
     * @throws \Exception
     */
    public function actionCreate()
    {
        $authActivities = \Yii::$app->params['christmas_activities'];

        $houseId = $this->post('houseId');
        $contractNo = $this->post('contractNo');
        $billType = $this->post('billType');
        $memberBillType = 1;
        $discountsChargeItemIds = [1, 4, 5, 14, 15, 16, 17, 18, 19, 21, 65, 121];

        $contractNo = explode(',', $contractNo);
        $house = House::findOne($houseId);
        if (!$house) {
            return $this->renderJsonFail(41002);
        }

        $houseProjectId = $house->project_house_id;
        //红包记录,排除海南分公司
        if(!in_array($houseProjectId, [156819,220812,222949,467387,467751,501909])){
            $isMemberHouse = AuthHouseNotificationMember::findOne(['member_id' => $this->userId, 'status' => 0, 'house_id' => $houseId]);
            if($isMemberHouse){
                return $this->renderJsonFail(50011, ['houseId' => $houseId]);
            }
        }

        //暂停缴费
        if(SysSwitch::inVal('pauseWeChatPayment', $houseProjectId)){
            return $this->renderJsonFail(50003);
        }

        $billList = (new NewWindow())->getBill($houseId);

        if (!is_array($billList)) {
            return $this->renderJsonFail(50012);
        }
        $_contractNo = ArrayHelper::getColumn($billList, 'ContractNo');
        $totalAmount = 0;
        $billToAmount = 0;
        $orderItems = [];
        $tempArray = [];
        $discountChargeAmount = 0;

        $discountStatus = 0;
        $getDiscount = [];

        foreach ($billList as $bill) {
            if($billType == 'bill'){
                $memberBillType = 2;
                foreach ($contractNo as $k => $no) {
                    if ($no == $bill['ContractNo']) {
                        $tempArray = $bill;
                        $billToAmount = bcsub($bill['BillAmount'], $bill['BillFines'], 2);
                        $totalAmount += $billToAmount;

                        $tempArray['BillAmount'] = $billToAmount;
                        $tempArray['BillTotalAmount'] = $bill['BillAmount'];

                        $orderItems[] = $tempArray;

                        //2017-12-24 ~ 2018-02-21 期间缴费优惠
                        if(in_array($bill['ChargeItemID'], $discountsChargeItemIds)){
                            $discountChargeAmount += $billToAmount;
                        }

                        unset($contractNo[$k]);
                        break;
                    }
                }
            } else {
                $memberBillType = 1;
                foreach ($contractNo as $k => $no) {
                    if ($no == $bill['ContractNo']) {
                        $totalAmount += round($bill['BillAmount'], 2);
                        $orderItems[] = $bill;

                        //2017-12-24 ~ 2018-02-21 期间缴费优惠
                        if(in_array($bill['ChargeItemID'], $discountsChargeItemIds)){
                            $billToAmount = round($bill['BillAmount'], 2);
                            $discountChargeAmount += $billToAmount;
                        }

                        unset($contractNo[$k]);
                        break;
                    }
                }
            }
        }

        if(time() <= $authActivities['allowedMaxTime']){
            $getDiscount = $this->buildBillDiscounts($totalAmount, $discountChargeAmount, $houseId, $houseProjectId);
            if(is_array($getDiscount) && $getDiscount['amount'] > 0){
                $totalAmount = $getDiscount['amount'];
                if(!empty($getDiscount['discount'])){
                    $discountStatus = 1;
                }
            }
        }

        $order = new PmOrder();
        $order->house_id = $house->house_id;
        $order->project_house_id = $house->project_house_id;
        $order->member_id = $this->userId;
        $order->total_amount = $totalAmount;
        $order->bill_type = $memberBillType;
        $order->discount_status = $discountStatus;

        $res = PmOrder::getDb()->transaction(function (Connection $db) use ($order, $orderItems) {
            if (!$order->save()) {
                $resMessage = $order->getFirstErrors();
                $db->getTransaction()->rollBack();
                return $resMessage;
            }
            foreach ($orderItems as $val){
                $orderItem = new PmOrderItem();
                $orderItem->pm_order_id = $order->id;
                $orderItem->contract_no = $val['ContractNo'];
                $orderItem->charge_detail_id_list = $val['ChargeDetailIDList'];
                $orderItem->charge_item_id = $val['ChargeItemID'];
                $orderItem->charge_item_name = $val['ChargeItemName'];
                $orderItem->amount = round($val['BillAmount'], 2);
                $orderItem->bill_date = $val['BillDate'];
                $orderItem->price = isset($val['Price']) ? $val['Price'] : 0;
                $orderItem->usage_amount = isset($val['Amount']) ? $val['Amount'] : 0;
                $orderItem->customer_name = isset($val['CustomerName']) ? $val['CustomerName'] : '-';
                $orderItem->bill_content = serialize($val);

                if (!$orderItem->save()) {
                    $resMessage = $orderItem->getErrors();
                    $db->getTransaction()->rollBack();
                    return $resMessage;
                };
            }
            return true;
        });

        if ($res === true) {
            if(is_array($getDiscount) && $getDiscount['amount'] > 0){
                PmOrderDiscounts::findOrCreate($order->id, $getDiscount['discount'], $getDiscount['useRedPack']);
            }

            return $this->renderJsonSuccess(200, ['orderId' => $order->id]);
        }

        return $this->renderJsonFail(41002, $res);
    }

    /**
     * JSAPI（招商）
     * @return string
     */
    public function actionWxjs()
    {
        $orderId = $this->post('orderId');
        if(empty($orderId) || !is_numeric($orderId)){
            return $this->renderJsonFail(41002);
        }

        $swiftPassPayParam = \Yii::$app->params['swiftPassPay'];

        $swiftPassPay = new SwiftPass($swiftPassPayParam);

        $pmOrder = PmOrder::findOne($orderId);
        if ($pmOrder && in_array($pmOrder->status, [PmOrder::STATUS_READY, PmOrder::STATUS_WAIT_PAY])) {
            $totalAmount = bcmul($pmOrder->total_amount, 100);
            if(empty($totalAmount)){
                return $this->renderJsonFail(80001);
            }
            $pmOrder->number = PmOrder::createNumber();
            $pmOrder->status = PmOrder::STATUS_WAIT_PAY;
            $pmOrder->pay_type = PmOrder::PAY_TYPE_MP;
            $pmOrder->house_type = $pmOrder->house->structure->group;
            if ($pmOrder->save()) {
                if (in_array($pmOrder->member_id, \Yii::$app->params['test_member_id'])) {
                    $pmOrder->total_amount = \Yii::$app->params['test_member_amount'];
                    $pmOrder->save();

                    //测试期间删除订单明细
                    PmOrderItem::deleteAll(['pm_order_id' => $orderId]);
                }
                $js = $swiftPassPay->submitOrderInfo(
                    $pmOrder->member->mp_open_id,
                    $pmOrder->number,
                    $pmOrder->total_amount,
                    'https://www.51homemoney.com/swift-pass-pay/wx-notify',
                    ['is_minipg' => 1]
                );

                return $this->renderJsonSuccess(200, $js);
            }
        }

        return $this->renderJsonFail(41002);
    }

    /**
     * 微信官方支付
     * @author HQM 2018/12/12
     * @return string
     * @throws \components\wechatSDK\lib\WxPayException
     */
    public function actionMpwxjs()
    {
        $orderId = $this->post('orderId');
        if(empty($orderId) || !is_numeric($orderId)){
            return $this->renderJsonFail(41002);
        }

        $miniP = \Yii::$app->params['wechatMini'];
        $sdkParams = \Yii::$app->params['wechat'];
        $wechatSDK = new WechatSDK($sdkParams);

        $pmOrder = PmOrder::findOne($orderId);
        if ($pmOrder && in_array($pmOrder->status, [PmOrder::STATUS_READY, PmOrder::STATUS_WAIT_PAY])) {
            $totalAmount = bcmul($pmOrder->total_amount, 100);
            if(empty($totalAmount)){
                return $this->renderJsonFail(80001);
            }
            $pmOrder->number = PmOrder::createNumber();
            $pmOrder->status = PmOrder::STATUS_WAIT_PAY;
            $pmOrder->pay_type = PmOrder::PAY_TYPE_MP;
            $pmOrder->house_type = $pmOrder->house->structure->group;
            if ($pmOrder->save()) {
                if (in_array($pmOrder->member_id, \Yii::$app->params['test_member_id'])) {
                    $pmOrder->total_amount = \Yii::$app->params['test_member_amount'];
                    $pmOrder->save();

                    //测试期间删除订单明细
                    PmOrderItem::deleteAll(['pm_order_id' => $orderId]);
                }
                $options = [
                    'subMchId' => \Yii::$app->params['wxPay']['subMchId'],
                    'notifyUrl' => 'https://www.51homemoney.com/swift-pass-pay/wx-notify',
                    'sub_appid' => $miniP['appId']
                ];

                $openId = $pmOrder->member->wechat_open_id;

                $js = $wechatSDK->wxJsApiPay(
                    $pmOrder->number,
                    $openId,
                    $pmOrder->total_amount,
                    $options
                );

                return $this->renderJsonSuccess(200, $js);
            }
        }

        return $this->renderJsonFail(41002);
    }

    /**
     * 跨年缴物业费优惠
     * @author HQM 2018/11/15
     * @param $totalAmount
     * @param  $discountChargeAmount
     * @param $houseId
     * @param $houseProjectId
     * @return mixed
     */
    private function buildBillDiscounts($totalAmount, $discountChargeAmount, $houseId, $houseProjectId)
    {
        //排除海南分公司
        if(in_array($houseProjectId, [156819,220812,222949,467387,467751,501909])){
            return false;
        }

        $pmChristmasBillItem = PmChristmasBillItem::findOne(['house_id' => $houseId]);
        if($pmChristmasBillItem){
            return false;
        }

        if(empty($discountChargeAmount)){
            return false;
        }

        $discountAmount = 0;
        $receivedBill = 0;
        $data = [];
        $memberRedPackAmount = 0;

        $memberUseCoupon = MemberPromotionCode::findOne(['member_id' => $this->userId, 'promotion_name' => 'auth', 'status' => MemberPromotionCode::STATUS_DEFAULT, 'house_id' => $houseId]);
        if($memberUseCoupon){
            $memberRedPackAmount = $memberUseCoupon->amount;
        }


        /*if($discountChargeAmount > 6000){
            $discountAmount = 200;
        } else if($discountChargeAmount >= 5000 && $discountChargeAmount < 6000){
            $discountAmount = 150;
        } else if($discountChargeAmount >= 4000 && $discountChargeAmount < 5000){
            $discountAmount = 100;
        } else if($discountChargeAmount >= 3000 && $discountChargeAmount < 4000){
            $discountAmount = 80;
        } else if($discountChargeAmount >= 2000 && $discountChargeAmount < 3000){
            $discountAmount = 50;
        } else if($discountChargeAmount >= 1000 && $discountChargeAmount < 2000){
            $discountAmount = 20;
        } else if($discountChargeAmount > 0) {
            $discountAmount = 5;
        }*/

        $discountAmount = $discountAmount + $memberRedPackAmount;

        $receivedBill = bcsub($totalAmount, $discountAmount, 2);

        $data['useRedPack'] = $memberRedPackAmount > 0 ? 1 : false;
        $data['amount'] = $receivedBill;
        $data['discount'] = $discountAmount;

        return $data;
    }

}